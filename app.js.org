App = Ember.Application.create({});

// TODO handle network errors

/** ADAPTERS **/
DS.RESTAdapter.reopen({});
App.ApiKeyAdapter = DS.LSAdapter.extend({});

/** SERIALIZERS **/
App.ApplicationSerializer = DS.RESTSerializer.extend({});

/** ROUTER MAP **/
App.Router.map(function() {});

/** ROUTES **/
App.LoadingRoute = Ember.Route.extend({});
App.ApplicationRoute = Ember.Route.extend({});
App.ProductsRoute = Ember.Route.extend({});
App.ProductsIndexRoute = Ember.Route.extend({});

App.ProductEditRoute = Ember.Route.extend({
    actions: {
        didTransition: function() {
            console.log('ProductEditRoute: didTransition()');
            this.controller.set('isEditing', true);
            return true;
        }
    }
});

App.ProductsNewRoute = Ember.Route.extend({});
App.AuthenticatedRoute = Ember.Route.extend({});
App.SessionsRoute = Ember.Route.extend({});
App.SecretRoute = App.AuthenticatedRoute.extend({});
App.UsersSignupRoute = Ember.Route.extend({});

/** CONTROLLERS **/
App.ApplicationController = Ember.Controller.extend({});

App.IndexController = Ember.Controller.extend({
    // requires the sessions controller
    needs: ['sessions'],

    // TODO: not DRY need to centralize
    // creates a computed property called currentUser that will be
    // binded on the curretUser of the sessions controller and will return its value
    currentUser: (function() {
        var res = this.get('controllers.sessions.currentUser');
        console.log('IndexController: currentUser='+JSON.stringify(res));
        return res;
    }).property('controllers.sessions.currentUser'),

    // creates a computed property called isAuthenticated that will be
    // binded on the curretUser of the sessions controller and will verify if the object is empty
    isAuthenticated: (function() {
        var res = !Ember.isEmpty(this.get('controllers.sessions.currentUser'));
        console.log('IndexController: isAuthenticated='+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

App.UsersSignupController = Ember.Controller.extend({});
App.SessionsController = Ember.Controller.extend({});
App.ProductsController = Ember.ArrayController.extend({});

App.ProductsNewController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductsNewController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

App.ProductController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

App.ProductEditController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductEditController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});


App.ProductIndexController = Ember.ObjectController.extend({
    needs: ['products', 'sessions'],
    isEditing: Ember.computed.alias('controllers.products.isEditing'),

    // TODO: Not DRY
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductIndexController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser'),

    actions: {
        editProduct: function(product) {
            this.set('isEditing', true);
            this.transitionToRoute('product.edit', product);
        },
        deleteProduct: function(product) {
            var id = product.get('id'),
                name = product.get('name');
            if (confirm('Are you sure you want to delete product '+name+' ('+id+') ?')) {
                console.log('ProductIndexController: Delete product => '+product.get('name'));
                product.destroyRecord(); // => DELETE to /products/id
            } else {
                console.log('ProductIndexController: Delete product => Cancelled');
            }
            this.transitionToRoute('products');
        }
    }
});

App.ProductEditController = Ember.ObjectController.extend({
    needs: ['products'],
    isEditing: Ember.computed.alias('controllers.products.isEditing'),
    actions: {
        saveEditProduct: function(product) {
            this.set('isEditing', false);
            product.save();
            console.log('ProductEditController: Save product => '+product.get('name'));
            this.transitionToRoute('product', product);
        },
        cancelEditProduct: function(product) {
            this.set('isEditing', false);
            product.rollback();
            console.log('ProductEditController: Cancel product => '+product.get('name'));
            this.transitionToRoute('product', product);
        }
    }
});

App.ProductsNewController = Ember.ObjectController.extend({});

App.UsersUserController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('UsersUserController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser'),

    actions: {
        editProfile: function() {
            alert('Sorry, not yet implemented (be patient)');
        }
    }
});

App.SecretController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('SecretController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

/** MODELS **/
App.Product = DS.Model.extend({});
App.User = DS.Model.extend({});
App.ApiKey = DS.Model.extend({});

/** HANDLEBAR HELPERS **/
Ember.Handlebars.helper('truncate', function(value, options) {});
Ember.Handlebars.helper('pluralize', function(number, options) {});
Ember.Handlebars.helper('fromnow', function(context) {});
Ember.Handlebars.helper('formatvalue', function(value, options) {});
Ember.Handlebars.helper('yesno', function(b) {});
