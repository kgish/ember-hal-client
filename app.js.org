App = Ember.Application.create({});

// TODO handle network errors

/** ADAPTERS **/
DS.RESTAdapter.reopen({});
App.ApiKeyAdapter = DS.LSAdapter.extend({});

/** SERIALIZERS **/
App.ApplicationSerializer = DS.RESTSerializer.extend({});

/** ROUTER MAP **/
App.Router.map(function() {});

/** ROUTES **/
App.LoadingRoute = Ember.Route.extend({});
App.ApplicationRoute = Ember.Route.extend({});

App.ProductsRoute = Ember.Route.extend({
});

App.ProductsIndexRoute = Ember.Route.extend({});

App.ProductEditRoute = Ember.Route.extend({
    actions: {
        didTransition: function() {
            console.log('ProductEditRoute: didTransition()');
            this.controller.set('isEditing', true);
            return true;
        }
    }
});

App.ProductsNewRoute = Ember.Route.extend({
    model: function() {
        console.log('ProductsNewRoute: model()');
        return this.store.createRecord('product');
    },
    actions: {
        didTransition: function() {
            console.log('ProductsNewRoute: didTransition()');
            this.controller.set('isEditing', true);
            return true;
        }
    }
});

App.AuthenticatedRoute = Ember.Route.extend({});
App.SessionsRoute = Ember.Route.extend({});
App.SecretRoute = App.AuthenticatedRoute.extend({});
App.UsersSignupRoute = Ember.Route.extend({});

/** CONTROLLERS **/
App.ApplicationController = Ember.Controller.extend({});

App.IndexController = Ember.Controller.extend({
    // requires the sessions controller
    needs: ['sessions'],

    // TODO: not DRY need to centralize
    // creates a computed property called currentUser that will be
    // binded on the curretUser of the sessions controller and will return its value
    currentUser: (function() {
        var res = this.get('controllers.sessions.currentUser');
        console.log('IndexController: currentUser='+JSON.stringify(res));
        return res;
    }).property('controllers.sessions.currentUser'),

    // creates a computed property called isAuthenticated that will be
    // binded on the curretUser of the sessions controller and will verify if the object is empty
    isAuthenticated: (function() {
        var res = !Ember.isEmpty(this.get('controllers.sessions.currentUser'));
        console.log('IndexController: isAuthenticated='+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

App.UsersSignupController = Ember.Controller.extend({
});

App.SessionsController = Ember.Controller.extend({});

App.ProductsController = Ember.ArrayController.extend({
    needs: ['sessions'],
    isEditing: false,

    sortAscending: true,
    sortProperties: ['name'],
    itemController: 'product',

    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductsController: currentUser='+res);
        return res;
    }).property('controllers.sessions.currentUser'),
    actions: {
        createProduct: function() {
            console.log('ProductsController: Create product');
            this.transitionToRoute('products.new');
        }
    }
});

App.ProductsNewController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductsNewController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

App.ProductController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

App.ProductEditController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductEditController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});


App.ProductIndexController = Ember.ObjectController.extend({
    needs: ['products', 'sessions'],
    isEditing: Ember.computed.alias('controllers.products.isEditing'),

    // TODO: Not DRY
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('ProductIndexController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser'),

    actions: {
        editProduct: function(product) {
            this.set('isEditing', true);
            this.transitionToRoute('product.edit', product);
        },
        deleteProduct: function(product) {
            var id = product.get('id'),
                name = product.get('name');
            if (confirm('Are you sure you want to delete product '+name+' ('+id+') ?')) {
                console.log('ProductIndexController: Delete product => '+product.get('name'));
                product.destroyRecord(); // => DELETE to /products/id
            } else {
                console.log('ProductIndexController: Delete product => Cancelled');
            }
            this.transitionToRoute('products');
        }
    }
});

App.ProductEditController = Ember.ObjectController.extend({
    needs: ['products'],
    isEditing: Ember.computed.alias('controllers.products.isEditing'),
    actions: {
        saveEditProduct: function(product) {
            this.set('isEditing', false);
            product.save();
            console.log('ProductEditController: Save product => '+product.get('name'));
            this.transitionToRoute('product', product);
        },
        cancelEditProduct: function(product) {
            this.set('isEditing', false);
            product.rollback();
            console.log('ProductEditController: Cancel product => '+product.get('name'));
            this.transitionToRoute('product', product);
        }
    }
});

App.ProductsNewController = Ember.ObjectController.extend({
    needs: ['products'],
    isEditing: Ember.computed.alias('controllers.products.isEditing'),

    actions: {
        saveNewProduct: function() {
            var product = this.get('model');
            console.log('ProductsNewController: saveNewProduct() => '+JSON.stringify(product));
            if (this._validProduct(product, true)) {
                product.set('name', product.get('name').trim());
                product.set('category', product.get('category').trim());
                product.set('price', product.get('price').trim());
                product.save();
                this.set('isEditing', false);
                this.transitionToRoute('product', product);
            } else {
               return false;
            }
        },
        cancelNewProduct: function() {
            var product = this.get('model');
            product.destroyRecord();
            this.set('isEditing', false);
            console.log('ProductNewController: Create product => Cancelled');
            this.transitionToRoute('products');
        }
    },

/* private */

    //TODO make this globally accessable also for edit product.
    _validProduct: function(product, f) {
        var name = product.get('name'),
            category = product.get('category'),
            price = product.get('price'),
            re = new RegExp('^\\d+$');

        if (!this._validString(name, 'name', f)) { return false; }
        if (!(price && re.test(price.trim()))) {
            if (f) { alert('Invalid price (must be a number)'); }
            return false;
        }
        if (!this._validString(category, 'category', f)) { return false; }
        return true;
    },

    _validString: function(s, n, f) {
        if (!(s && s.trim().length)) {
            if (f) { alert('Invalid '+n+' (must be a non-empty string)'); }
            return false;
        }
        return true;
    }
});

App.UsersUserController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('UsersUserController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser'),

    actions: {
        editProfile: function() {
            alert('Sorry, not yet implemented (be patient)');
        }
    }
});

App.SecretController = Ember.ObjectController.extend({
    // TODO: Not DRY
    needs: ['sessions'],
    isAdmin: (function() {
        var res = this.get('controllers.sessions.currentUser.is_admin');
        console.log('SecretController: isAdmin = '+res);
        return res;
    }).property('controllers.sessions.currentUser')
});

/** MODELS **/
App.Product = DS.Model.extend({});
App.User = DS.Model.extend({});
App.ApiKey = DS.Model.extend({});

/** HANDLEBAR HELPERS **/
Ember.Handlebars.helper('truncate', function(value, options) {});
Ember.Handlebars.helper('pluralize', function(number, options) {});
Ember.Handlebars.helper('fromnow', function(context) {});
Ember.Handlebars.helper('formatvalue', function(value, options) {});
Ember.Handlebars.helper('yesno', function(b) {});

